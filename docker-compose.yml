version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: sitar_postgres
    environment:
      POSTGRES_DB: sitar_db
      POSTGRES_USER: sitar_user
      POSTGRES_PASSWORD: sitar_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sitar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sitar_user -d sitar_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cache Service
  redis:
    image: redis:7-alpine
    container_name: sitar_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sitar_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: sitar_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - sitar_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: sitar_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sitar_network

  # Blockchain Network (Hyperledger Fabric Test Network)
  blockchain:
    image: hyperledger/fabric-peer:2.5
    container_name: sitar_blockchain
    environment:
      - CORE_PEER_ID=peer0.sitar.com
      - CORE_PEER_ADDRESS=blockchain:7051
      - CORE_PEER_LOCALMSPID=SitarMSP
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=sitar_sitar_network
    ports:
      - "7051:7051"
    volumes:
      - /var/run:/host/var/run
      - ./infrastructure/blockchain:/etc/hyperledger/fabric
    networks:
      - sitar_network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: sitar_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sitar_network

  grafana:
    image: grafana/grafana:latest
    container_name: sitar_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - sitar_network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: sitar_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sitar_network

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: sitar_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: sitar_admin
      MINIO_ROOT_PASSWORD: sitar_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - sitar_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sitar_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sitar_network

networks:
  sitar_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  minio_data:
